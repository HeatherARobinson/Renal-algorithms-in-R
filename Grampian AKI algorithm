#This is an edited version of AKI discrete episode code as previously described in Sawhney S, Fluck N, Fraser SD, Marks A, Prescott GJ, Roderick PJ, et al. KDIGO-based acute kidney injury criteria operate differently in hospitals and the community - Findings from a large population cohort. Nephrol Dial Transplant. 2016; 
#Applicable to adults >=15 years
#The original version included multiple different definitions using different look-backs, look-forwards, 
#and approaches to ranking baseline values
#This code cannot be applied directly to the current NHSE AKI warning algorithm, because the use here of a 8-90-365 hierarchical 
#criterion results in different categorisations.
#Lab reported MDRD eGFR is used to define baseline, modules are also included to derive this from MDRD or CKD-EPI
#This code requires pre-installation of the following R packages:
#lubridate,dplyr,tarifx,cltk

library(lubridate)
library(dplyr)
library (taRifx)#Essential for progress bar only
library(tcltk)#Essential for progress bar only

############################################################################################
#PART 0 - INITIAL VARIABLE CHECKLIST

#studyid = unique id number for patient
#dos = date of sample
#stcreat = idms standardised creatinine
#mdrd = mdrd eGFR
#sex = male=1 female=0
#age = age in years at time of sample
#location_code = inpatient or outpatient sample
#Ensure input table columns are ordered as above

#PLEASE ENSURE THAT THE FILE CONTAINS ONLY STANDARDISED SERUM/BLOOD CREATININE RESULTS (NO OTHER BIOCHEMISTRY) 
#ALSO CHECK THAT ALL SAMPLES AFTER PATIENTS HAVE STARTED RRT/RECEIVED A TRANSPLANT HAVE BEEN REMOVED

############################################################################################

# PART 1 - CHECK AND ORGANISE VARIABLES
#This section ensures dates are recognised by R
#destrings numeric variables
#Based on studying the highest creatinine each day considering low reliability of time stamps

a<-read.table("tests.csv",sep=",",header=TRUE)
attach(a)
destring(c(studyid,stcreat,age,sex,dos,mdrd))
a <- a[order(-stcreat),] #The highest stcreat per day will be retained
a2<-a[duplicated(a[,1:2]), ] #drop other stcreat values
a<-a[!rownames(a) %in% rownames(a2),]#drop other values
length(a$studyid) #Number of records following duplicate removal
 a<-a[!is.na(a$Creatinine),]
length(a$studyid) #Remaining entries after removing missing and impossible values


#Select the maximum creatinine value per day per patient
a <- a[order(-Creatinine),] #'Creatinine' refers to the summary value- the highest serum creatinine per day
a2<-a[duplicated(a[,1:2]),] #Remove any additional same day entries
a<-a[!rownames(a) %in% rownames(a2) & !is.na(a$Creatinine),]#drop other values

sorted <- a %>% 
          arrange(PatientID,event.date) %>%
          group_by(PatientID) %>%
          mutate(protagonist=row_number())
a<-data.frame(sorted)
attach(a)

################################################################################
# PART 2 - LOOP FOR AKI FLAGS TO COMPARE EACH TEST WITH PREVIOUS TESTS
#CREATE A MARKER VARIABLE FOR EACH TIME AKI E-ALERT CRITERIA SATISFIED

newAKI<-0
AKIyear<-0
AKIweek<-0
max(protagonist) #number of loop iterations needed.

#LOOP for x values, where x = the highest number of tests a patient had in the index year (max(protagonist)) 
mightydate<-NA
mightyvalue<-NA
protagonistdos<-NA
yearmarker<-0
weekmarker<-0
Dmarker<-0
yearmedian<-0
weekmin<-0
Dmin<-0
yearvalue<-0
weekvalue<-0
Dvalue<-0
protagonistdos<-0
protagonistvalue<-0
a <-a[order(PatientID, event.date),] 
attach(a)

############################################################################################################# CHECKED
pb<-tkProgressBar(title="Identifying AKI events",min=0,max=max(protagonist),width=300) #indicates progress through the loop
for (i in 1:max(protagonist)) {
setTkProgressBar(pb,i,label=paste(round(i/max(protagonist)*100, 0),"% done"))
mightydate<-as.Date(ifelse(protagonist==protagonist[i] & PatientID==PatientID[i],event.date[i],mightydate),origin="1970-01-01")
protagonistdos<-ave(mightydate,PatientID,FUN=max)
#Apply each test date to all other tests from the same patient to find the time difference

yearmarker[i]<-ifelse(as.Date(protagonistdos)-event.date[i]<=365 & (protagonistdos-event.date[i]>90),1,yearmarker)
weekmarker[i]<-ifelse(as.Date(protagonistdos)-event.date[i]<=7 & (protagonistdos-event.date)[i]>=0,1,weekmarker) 
Dmarker[i]<-ifelse(as.Date(protagonistdos)-event.date[i]<=2 & (protagonistdos-event.date)[i]>=0,1,Dmarker) 

yearvalue[i]<-ifelse(yearmarker[i]==1,Creatinine[i],NA)
weekvalue[i]<-ifelse(weekmarker[i]>0,Creatinine[i],NA)
Dvalue[i]<-ifelse(Dmarker[i]>0,Creatinine[i],NA)

#apply the optimal reference creatinine (which will later be chosen from yearmedian, weekmin or Dmin) across all of a patient's samples
yearmedian[i]<-ave(as.numeric(yearvalue),PatientID==PatientID,FUN = function(x) median(x, na.rm = TRUE))
weekmin[i]<-ave(as.numeric(weekvalue),PatientID==PatientID,FUN = function(x) min(x, na.rm = TRUE))
Dmin[i]<-ave(as.numeric(weekvalue),PatientID==PatientID,FUN = function(x) min(x, na.rm = TRUE))

#finds the index (investigated) creatinine of key interest, applies this value across all patient samples
mightyvalue<-NA
mightyvalue[i]<-Creatinine[i]
protagonistvalue<-ave(mightyvalue,PatientID,FUN = function(x) max(x, na.rm = TRUE))

#Finds the 48 hour difference in 2 samples taken within a 48 hour window
D[i]<-ifelse(as.numeric(Dmarker[i])>0,abs(Creatinine[i]-Dvalue[i]),NA)
RV1[i]<-mightyvalue[i]/weekmin[PatientID==PatientID]
RV2[i]<-mightyvalue[i]/yearmedian[PatientID==PatientID]
RV_ratio[i]<-ifelse(RV1[i]>RV2[i],RV1[i],RV2[i])

AKIyear[i]<-ifelse((mightyvalue[i]/yearmedian[i])>=1.5 & !is.na(yearmedian[i]) & (mightyvalue[i]>(3*RV_ratio[i])|RV_ratio[i]>=1.5),1,0)
AKIweek[i]<-ifelse((mightyvalue[i]/weekmin[i])>=1.5 & !is.na(weekmin[i]) & (mightyvalue[i]>(3*RV_ratio[i])|RV_ratio[i]>=1.5),1,0)
AKIyear[i]<-ifelse(is.na(AKIyear[i]) & !is.na(yearmedian[i]) & RV_ratio[i]<1.5 & D[i]>26,1,AKIyear[i])
AKIweek[i]<-ifelse(is.na(AKIweek[i]) & weekmin>0 & RV_ratio[i]<1.5 & D[i]>26,1,AKIweek[i])}

AKIyear[i]<-ifelse((mightyvalue[i]/yearmedian[i])>=1.5 & !is.na(yearmedian[i]) & (mightyvalue[i]>(3*RV_ratio[i])|RV_ratio[i]>=1.5),1,0)
AKIweek[i]<-ifelse((mightyvalue[i]/weekmin[i])>=1.5 & !is.na(weekmin[i]) & (mightyvalue[i]>(3*RV_ratio[i])|RV_ratio[i]>=1.5),1,0)
AKIyear[i]<-ifelse(is.na(AKIyear[i]) & !is.na(yearmedian[i]) & RV_ratio[i]<1.5 & D[i]>26,1,AKIyear[i])
AKIweek[i]<-ifelse(is.na(AKIweek[i]) & weekmin>0 & RV_ratio[i]<1.5 & D[i]>26,1,AKIweek[i])}

#END OF LOOP
close(pb)
##########################################################################################################CHECKED
#GROUP EPISODES
#DEFINE INDEX WINDOW
#IDENTIFY FIRST EPISODE OF INDEX YEAR

#AKI FLAGGING AND STAGING OF TESTS
a$AKIflag<-ifelse(AKIyear==0&AKIweek==0&Creatinine<ref.low,"Low","NA") #Flag low values from more than 1 year ago
a$AKIflag<-ifelse(AKIyear==0&AKIweek==0&Creatinine>ref.up,"High",paste(AKIflag)) #Flag high values from more than 1 year ago
a$AKIStage<-0
a$AKIflag<-ifelse(RV_ratio<1.5 & D<=26,"Report without alert. Send to authorisation Q. Consider requesting repeat If CKD unlikely.",paste(a$AKIflag))
a$AKIStage<-ifelse(RV_ratio<1.5 & D>26,1,a$AKIStage))

a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & (3*ref.up)<Creatinine,3,a$AKIStage))
a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & !(3*ref.up)<Creatinine& RV_ratio>=3,3,a$AKIStage))
a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & !(3*ref.up)<Creatinine& RV_ratio>=2&RV_ratio<3,2,a$AKIStage))
a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & !(3*ref.up)<Creatinine& RV_ratio>=1.5&RV_ratio<2,1,a$AKIStage))

a$AKIStage<-ifelse(RV_ratio>=1.5 & Age>=18 & Creatinine>354,3,a$AKIStage))
a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & stcreat<354 & RV_ratio>=3,3,a$AKIStage)
a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & stcreat<354 & RV_ratio>=2&RV_ratio<3,2,a$AKIStage)
a$AKIStage<-ifelse(RV_ratio>=1.5 & Age<18 & stcreat<354 & RV_ratio>=1.5&RV_ratio<2,1,a$AKIStage)
a$AKIflag<-if(is.na(a$AKIflag),"No Flag",paste(a$AKIflag))

###############################################ATTACH FLAGS AND STAGING TO ORIGINAL TABLE
a<-a[,c("PatientID","event.date","AKIStage","AKIflag")]
a <-merge(a,x,all.x=TRUE)
a$AKIStage<-ifelse(is.na(a$AKIStage),0,a$AKIStage)
