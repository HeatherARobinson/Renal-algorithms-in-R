#This is an edited version of AKI discrete episode code as previously described in Sawhney S, Fluck N, Fraser SD, Marks A, Prescott GJ, Roderick PJ, et al. KDIGO-based acute kidney injury criteria operate differently in hospitals and the community - Findings from a large population cohort. Nephrol Dial Transplant. 2016; 
#Applicable to adults >=15 years
#The original version included multiple different definitions using different look-backs, look-forwards, 
#and approaches to ranking baseline values
#This code cannot be applied directly to the current NHSE AKI warning algorithm, because the use here of a 8-90-365 hierarchical 
#criterion results in different categorisations.
#Lab reported MDRD eGFR is used to define baseline, modules are also included to derive this from MDRD or CKD-EPI
#This code requires pre-installation of the following R packages:
#lubridate,dplyr,tarifx,cltk, data.table

library(lubridate)
library(dplyr)
library (taRifx)#Essential for progress bar only
library(tcltk)#Essential for progress bar only
library(data.table)

############################################################################################
#PART 0 - INITIAL VARIABLE CHECKLIST

#studyid = unique id number for patient
#dos = date of sample
#stcreat = idms standardised creatinine
#mdrd = mdrd eGFR
#sex = male=1 female=0
#age = age in years at time of sample
#location_code = inpatient or outpatient sample
#Ensure input table columns are ordered as above

#PLEASE ENSURE THAT THE FILE CONTAINS ONLY STANDARDISED SERUM/BLOOD CREATININE RESULTS (NO OTHER BIOCHEMISTRY) 
#ALSO CHECK THAT ALL SAMPLES AFTER PATIENTS HAVE STARTED RRT/RECEIVED A TRANSPLANT HAVE BEEN REMOVED

############################################################################################

# PART 1 - CHECK AND ORGANISE VARIABLES
#This section ensures dates are recognised by R
#destrings numeric variables
#Based on studying the highest creatinine each day considering low reliability of time stamps

a<-read.table("tests.csv",sep=",",header=TRUE)
attach(a)
destring(c(studyid,stcreat,age,sex,dos,mdrd))
a <- a[order(-stcreat),] #The highest stcreat per day will be retained
a2<-a[duplicated(a[,1:2]), ] #drop other stcreat values
a<-a[!rownames(a) %in% rownames(a2),]#drop other values
length(a$studyid) #Number of records following duplicate removal
 a<-a[!is.na(a$Creatinine),]
length(a$studyid) #Remaining entries after removing missing and impossible values


###############################################################################################CHECKED

#WHERE 2003 IS THE INCIDENT YEAR; AND AKI EPISODES FROM 2000 TO 2003 ARE MARKED AS PRIOR EPISODES

#SELECT AS APPROPRIATE
#index<-which(dos>=40907 & dos<=41272) # example if using excel/STATA date formats
#a$post2000<-ifelse(dos>=39812,1,0) #sample after 1st jan 2000

#OR

#index<-which(dmy(dos)>=ymd("2012-01-01")&dmy(dos)<ymd("2013-01-01")) #Option for traditional format dates
#a$post2000<-ifelse(dmy(dos)>=ymd("2000-01-01"),1,0) #sample after 1st jan 2000

a$yr03<-0
a$yr03[index]<-1 #MARK INDEX YEAR
a<-a[a$post2000==1,] 
attach(a)

########################################################################################
#SELECT THE MAXIMUM CREATININE OF EACH DAY:
#GENERATE A "PROTAGONIST" VARIABLE THAT IS THE CUMULATIVE COUNT OF EACH MAXIMUM DAILY CREATININE VALUE AFTER JANUARY 1st 2003

a <- a[order(-stcreat),] 
a2<-a[duplicated(a[,1:2]),] #Remove any additional same day entries
a<-a[!rownames(a) %in% rownames(a2) & !is.na(a$stcreat),]#drop other values

sorted <- a %>% 
          arrange(studyid,dos) %>%
          group_by(studyidD) %>%
          mutate(protagonist=row_number())
a<-data.frame(sorted)
attach(a)
max(protagonist) #number of loop iterations needed.

################################################################################CHECKED
# PART 2 - LOOP THROUGH AKI FLAGS TO COMPARE EACH TEST WITH PREVIOUS TESTS
#CREATE A MARKER VARIABLE FOR EACH TIME AKI E-ALERT CRITERIA SATISFIED

newAKI<-0
AKImonth<-0
AKIyear<-0
AKIweek<-0
AKIday<-0

#LOOP for x values, where x = the highest number of tests a patient had in the index year (max(protagonist)) 
mightydate<-NA
protagonistdos<-NA
yearmarker<-0
monthmarker<-0
weekmarker<-0
daymarker<-0
yearmedian<-0
weekmin<-0
daymin<-0
yearvalue<-0
weekvalue<-0
dayvalue<-0
protagonistdos<-0
protagonistvalue<-0

a <-a[order(studyid, dos),] 
attach(a)

############################################################################################################# CHECKED
pb<-tkProgressBar(title="Identifying AKI events",min=0,max=max(protagonist),width=300) #indicates progress through the loop
for (i in 1:max(protagonist)) {
setTkProgressBar(pb,i,label=paste(round(i/max(protagonist)*100, 0),"% done"))
mightydate<-as.Date(ifelse(protagonist==protagonist[i] & studyid==studyid[i],dos[i],mightydate),origin="1970-01-01") #AMEND TO APPROPRIATE DATE FORMAT
protagonistdos<-ave(mightydate,studyid,FUN=max)
#Apply each test date to all other tests from the same patient to find the time difference

yearmarker[i]<-ifelse(as.Date(protagonistdos)-dos[i]<=365 & (protagonistdos-dos[i]>90),1,yearmarker)
weekmarker[i]<-ifelse(as.Date(protagonistdos)-dos[i]<=7 & (protagonistdos-dos)[i]>=0,1,weekmarker) 
monthmarker[i]<-ifelse(as.Date(protagonistdos)-dos[i]<=90 & (protagonistdos-dos)[i]>=8,1,weekmarker) 
daymarker[i]<-ifelse(as.Date(protagonistdos)-dos[i]<=2 & (protagonistdos-dos)[i]>0,1,Dmarker) 

yearvalue[i]<-ifelse(yearmarker[i]==1,stcreat[i],NA)
weekvalue[i]<-ifelse(weekmarker[i]>0,stcreat[i],NA)
monthvalue[i]<-ifelse(monthmarker[i]>0,stcreat[i],NA)
dayvalue[i]<-ifelse(daymarker[i]>0,stcreat[i],NA)

#finds the appropriate creatinine within these windows

#apply the optimal reference creatinine (could be yearmedian, monthmin, weekmin or daymin) across all of a patient's samples

yearmedian[i]<-ave(as.numeric(yearvalue),studyid==studyid,FUN = function(x) median(x, na.rm = TRUE))
weekmin[i]<-ave(as.numeric(weekvalue),studyid==studyid,FUN = function(x) min(x, na.rm = TRUE))
monthmedian[i]<-ave(as.numeric(weekvalue),studyid==studyid,FUN = function(x) median(x, na.rm = TRUE))
daymin[i]<-ave(as.numeric(dayvalue),studyid==studyid,FUN = function(x) min(x, na.rm = TRUE))

#finds the index (investigated) creatinine of key interest, applies this value across all patient samples
mightyvalue<-NA
mightyvalue[i]<-studyid[i]
protagonistvalue<-ave(mightyvalue,studyid,FUN = function(x) max(x, na.rm = TRUE))

AKIyear[i]<-ifelse((protagonistvalue[i]/yearmedian[i])>=1.5 & !is.na(yearmedian[i]) & is.na(monthmedian[i]),1,0)
AKImonth[i]<-ifelse((protagonistvalue[i]/monthmedian[i])>=1.5 & !is.na(monthmedian[i]) & is.na(weekmin[i]),1,0)
AKIweek[i]<-ifelse((protagonistvalue[i]/weekmin[i])>=1.5 & !is.na(weekmin[i]) & is.na(daymin),1,0)
AKIday[i]<-ifelse((protagonistvalue[i]/daymin[i])>=1.5 & !is.na(daymin[i]),1,0)}

#year AKI can ONLY be tested if there is not a monthmedian already available for the sample, thus monthmedian sample needs to be missing before looking back further
*END OF LOOP, HAVE NOW FLAGGED ALL TESTS MEETING EACH TYPE OF AKI CONDITION
close(pb)
##########################################################################################################CHECK DEFINITIONS HERE- AND IN NHS VERSION AND PERMIT VERSION

#PART 3 - PROCESSING OF AKI FLAGS

#Split into AKI episodes
#DIVIDE AKI INTO 90 DAY SESSIONS

#DIVIDE AKI INTO 90 DAY SESSIONS
#Assign an akicounter value of 1 to all AKI blood tests
a<-a[AKIweek==1|AKIyear==1,]
a<-a[order(studyid,event.date),]
a$AKIcounter<-1
a$studyid<-as.factor(a$studyid)
attach(a)

a<-as.data.table(a)
a[, lag.date := c(NA, dos[-.N]), by = studyid])
a$add<-ifelse(as.numeric(dos)-a$lag.date>90,1,0)
attach(a)

#Add +1 to aki counter if the date of the sample was >90 days after the first sample with an akicounter value of 1

a$add<-ifelse(is.na(a$add),0,a$add)
a$AKIcounter==1
for(x in 2:length(a$AKIcounter)){
a$AKIcounter[x]<-ifelse(PatientID[x]==PatientID[x-1],
a$AKIcounter[x-1]+a$add[x],1)}

#FLAG THE FIRST AKI OF THE INDEX YEAR
tabx<-a[a$yr03==1,c("studyid","AKIcounter")]
first<-tabx %>% 
group_by_(studyid) %>%
summarize(firstIndexAKI=min(AKIcounter)) %>%
as.data.frame
a<-merge(a,firstH,all.x=TRUE)
a$firstAKI<-ifelse(a$AKIcounter==a$firstIndexAKI,1,0)

###########################################################################AKI FLAGGING AND STAGING 
a$AKIStage<-ifelse(RV_ratio<1.5 & D>26,1,0))
a$AKIStage<-ifelse(RV_ratio>=1.5 & Creatinine>354,3,a$AKIStage))
a$AKIStage<-ifelse(RV_ratio>=1.5 & stcreat<354 & RV_ratio>=3,3,a$AKIStage)
a$AKIStage<-ifelse(RV_ratio>=1.5 & stcreat<354 & RV_ratio>=2&RV_ratio<3,2,a$AKIStage)
a$AKIStage<-ifelse(RV_ratio>=1.5 & stcreat<354 & RV_ratio>=1.5&RV_ratio<2,1,a$AKIStage)

###########################################################################ATTACH TO ORIGINAL TABLE
a<-a[,c("PatientID","event.date","AKIStage","AKIflag")]
b<--read.table("tests.csv",sep=",",header=TRUE)
b<-merge(b,a,all.x=TRUE)
b$AKIStage<-ifelse(is.na(b$AKIStage),0,b$AKIStage)
save(b,file="outputname.rda")
